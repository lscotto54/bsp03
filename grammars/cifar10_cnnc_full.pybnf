# see fitness/pymax.py for docs.
<code>::= from tensorflow import keras{::}from tensorflow.keras.models import Sequential{::}from tensorflow.keras.layers import Conv2D, GlobalAveragePooling2D, GlobalMaxPooling2D, Activation, BatchNormalization{::}<p>
<p> ::= <defp>{::}<callp>
<defp> ::= def keras_model(x_train, y_train, x_test, y_test, num_classes, epochs):{:batch_size=<b_size>{::}model=Sequential(){::}<cnn><fit>{::}{::}return <score>:}
<callp> ::= XXX_output_XXX = keras_model(x_train, y_train, x_test, y_test, num_classes, epochs)
<fit> ::= model.compile(loss="'categorical_crossentropy'",optimizer="'adam'",metrics=["'accuracy'"]){::}model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, shuffle=True, verbose=0)
<score> ::= model.evaluate(x_test, y_test, verbose=1)
# a function is a list of statements
<cnn> ::= <input><c_layer><last>{::}
<input> ::= model.add(keras.Input(shape=x_train.shape[1:])){::}
<last> ::= model.add(Conv2D(num_classes, (1,1), activation=<activation>, strides=<strides>, padding=<padding>)){::}model.add(BatchNormalization()){::}<gpool>{::}model.add(Activation("'softmax'")){::}
<c_layer> ::= <conv> | <conv><c_layer>
<conv> ::= try:{:model.add(Conv2D(<filters>, <k_size>, activation=<activation>, strides=<strides>, padding=<padding>)){::}model.add(BatchNormalization()){::}:}except ValueError:{:pass:}
<gpool> ::= <gmaxpool> | <gavgpool>
<gmaxpool> ::= model.add(GlobalMaxPooling2D()){::}
<gavgpool> ::= model.add(GlobalAveragePooling2D()){::}
<activation> ::= "'relu'" | "'selu'" | "'elu'"
#<activation> ::= "'relu'"
<padding> ::= "'valid'" | "'same'"
<filters> ::= 16 | 32 | 64 | 128
<k_size> ::= (3,3) | (5,5) | (7,7)
<b_size> ::= 32 | 64 | 128 | 256
<strides> ::= 1 | 2